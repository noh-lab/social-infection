### Trycycler with Polypolish

# What is my read depth?
PacBio but also HiFi - 5000+
ONT - 100+
illumina - 200+


# filtlong QC and trycycler subsample

for file in *.fastq.gz; do echo "$file"; keep="${file%.fastq*}"; filtlong --min_length 1000 --keep_percent 95 "$file" | gzip > "$keep".long.gz ; done

for file in *.long.gz; do echo "$file"; keep="${file%.long*}"; trycycler subsample --reads "$file" --out_dir "$keep"_subsets --genome_size 4.1m --count 6; done


# with nanopore reads, flye and raven assembly

threads=12
mkdir assemblies

for file in *.fastq.gz; do
keep="${file%_nanopore*}"
echo "$keep"

flye --nano-hq "$keep"_nanopore_subsets/sample_01.fastq --threads "$threads" --out-dir assembly_01 && cp assembly_01/assembly.fasta assemblies/"$keep"_nanopore_assembly_01.fasta && cp assembly_01/assembly_graph.gfa assemblies/"$keep"_nanopore_assembly_01.gfa && rm -r assembly_01

flye --nano-hq "$keep"_nanopore_subsets/sample_02.fastq --threads "$threads" --out-dir assembly_02 && cp assembly_02/assembly.fasta assemblies/"$keep"_nanopore_assembly_02.fasta && cp assembly_02/assembly_graph.gfa assemblies/"$keep"_nanopore_assembly_02.gfa && rm -r assembly_02

flye --nano-hq "$keep"_nanopore_subsets/sample_03.fastq --threads "$threads" --out-dir assembly_03 && cp assembly_03/assembly.fasta assemblies/"$keep"_nanopore_assembly_03.fasta && cp assembly_03/assembly_graph.gfa assemblies/"$keep"_nanopore_assembly_03.gfa && rm -r assembly_03

raven --threads "$threads" --disable-checkpoints --graphical-fragment-assembly assemblies/"$keep"_nanopore_assembly_04.gfa "$keep"_nanopore_subsets/sample_04.fastq > assemblies/"$keep"_nanopore_assembly_04.fasta

raven --threads "$threads" --disable-checkpoints --graphical-fragment-assembly assemblies/"$keep"_nanopore_assembly_05.gfa "$keep"_nanopore_subsets/sample_05.fastq > assemblies/"$keep"_nanopore_assembly_05.fasta

raven --threads "$threads" --disable-checkpoints --graphical-fragment-assembly assemblies/"$keep"_nanopore_assembly_06.gfa "$keep"_nanopore_subsets/sample_06.fastq > assemblies/"$keep"_nanopore_assembly_06.fasta

done


# with pacbio reads, flye and hifiasm assembly

threads=12
mkdir assemblies

for file in *.fastq.gz; do
keep="${file%_nanopore*}"
echo "$keep"

flye --pacbio-hifi "$keep"_pacbio_subsets/sample_01.fastq --threads "$threads" --out-dir assembly_01 && cp assembly_01/assembly.fasta assemblies/"$keep"_pacbio_assembly_01.fasta && cp assembly_01/assembly_graph.gfa assemblies/"$keep"_pacbio_assembly_01.gfa && rm -r assembly_01

flye --pacbio-hifi "$keep"_pacbio_subsets/sample_02.fastq --threads "$threads" --out-dir assembly_02 && cp assembly_02/assembly.fasta assemblies/"$keep"_pacbio_assembly_02.fasta && cp assembly_02/assembly_graph.gfa assemblies/"$keep"_pacbio_assembly_02.gfa && rm -r assembly_02

flye --pacbio-hifi "$keep"_pacbio_subsets/sample_03.fastq --threads "$threads" --out-dir assembly_03 && cp assembly_03/assembly.fasta assemblies/"$keep"_pacbio_assembly_03.fasta && cp assembly_03/assembly_graph.gfa assemblies/"$keep"_pacbio_assembly_03.gfa && rm -r assembly_03

hifiasm -o assembly_04/"$keep" -t "$threads" -f0 --n-hap 1 "$keep"_pacbio_subsets/sample_04.fastq && cp assembly_04/"$keep".bp.p_ctg.gfa assemblies/"$keep"_pacbio_assembly_04.gfa && awk '/^S/{print ">"$2"\n"$3}' assembly_04/"$keep".bp.p_ctg.gfa | fold > assemblies/"$keep"_pacbio_assembly_04.fasta && rm -r assembly_04

hifiasm -o assembly_05/"$keep" -t "$threads" -f0 --n-hap 1 "$keep"_pacbio_subsets/sample_05.fastq && cp assembly_05/"$keep".bp.p_ctg.gfa assemblies/"$keep"_pacbio_assembly_05.gfa && awk '/^S/{print ">"$2"\n"$3}' assembly_05/"$keep".bp.p_ctg.gfa | fold > assemblies/"$keep"_pacbio_assembly_05.fasta && rm -r assembly_05

hifiasm -o assembly_06/"$keep" -t "$threads" -f0 --n-hap 1 "$keep"_pacbio_subsets/sample_06.fastq && cp assembly_06/"$keep".bp.p_ctg.gfa assemblies/"$keep"_pacbio_assembly_06.gfa && awk '/^S/{print ">"$2"\n"$3}' assembly_06/"$keep".bp.p_ctg.gfa | fold > assemblies/"$keep"_pacbio_assembly_06.fasta && rm -r assembly_06

done


# trycycler cluster assemblies

cd burk_pacbio

for file in bh*.long.gz; do
keep="${file%_pacbio*}"
echo "$keep"

trycycler cluster --assemblies ../burk_*/assemblies/"$keep"*fasta --reads "$file" --out_dir ../"$keep"_cluster

done


# manually examine and remove bad clusters: https://github.com/rrwick/Trycycler/wiki/Clustering-contigs


# reconcile contigs

trycycler reconcile --threads 12 --verbose --reads burk_pacbio/bb395_pacbio.long.gz --cluster_dir bb395_cluster/cluster_001

trycycler reconcile --threads 12 --verbose --reads burk_pacbio/bb395_pacbio.long.gz --cluster_dir bb395_cluster/cluster_002


# msa

trycycler msa --cluster_dir bb395_cluster/cluster_001
trycycler msa --cluster_dir bb395_cluster/cluster_002


# partition

trycycler partition --threads 24 --reads burk_pacbio/bb395_pacbio.long.gz --cluster_dirs bb395_cluster/cluster_*


# consensus

trycycler consensus --threads 24 --cluster_dir bb395_cluster/cluster_001
trycycler consensus --threads 24 --cluster_dir bb395_cluster/cluster_002


# concatenate

cat bb395_cluster/cluster_*/7_final_consensus.fasta > bb395_trycycler.fasta


# QC illumina reads

fastp --in1 burk_illumina/bb395_S65_R1_001.fastq.gz --in2 burk_illumina/bb395_S65_R2_001.fastq.gz --out1 burk_illumina/bb395_R1.fastp.fastq.gz --out2 burk_illumina/bb395_R2.fastp.fastq.gz


# polypolish

bwa index $1_trycycler.fasta
bwa mem -t 16 -a $1_trycycler.fasta burk_illumina/$1_R1.fastp.fastq.gz > $1_1.sam
bwa mem -t 16 -a $1_trycycler.fasta burk_illumina/$1_R2.fastp.fastq.gz > $1_2.sam
polypolish $1_trycycler.fasta $1_1.sam $1_2.sam > $1_try_poly.fasta


# fix start
singularity run -B /export/groups/snoh:/mnt /export/groups/singularity/circlator_20230118.sif bash

circlator fixstart --genes_fa /mnt/snoh/assemble_burk/new_starts_img_predicted.fa /mnt/snoh/assemble_burk/bb395_try_poly.fasta /mnt/snoh/assemble_burk/fixedstart/bb395_dnaa_irp_trycycler


# mummer to check alignment - Good! everything looks as expected.

nucmer bbqs859.fna bb395_dnaa_irp_trycycler.fasta
mummerplot -t png -p bb395 out.delta


### Prokka and Pseudofinder

prokka --force --outdir bb395 --locustag BB395 --proteins Burkholderia_pseudomallei_K96243_132.gbk --gcode 11 --genus Paraburkholderia --species bonniea --strain BbQS395 --gram neg --addgenes --rnammer --compliant bb395_dnaa_irp_trycycler.fasta

pseudofinder.py annotate --diamond --skip_makedb -g bonnhayl_genomes/bb395/PROKKA_03242023.gbf -db /export/groups/snoh/shared/diamonddb/refseq_protein_nr.dmnd -op bb395

grep BB395 bb395_pseudos.gff | sort -k1,1 -k4,4n | awk -F "\t" '{split($9,a,";"); split(a[3],b,"="); split(a[1],c,":"); print b[2]}' OFS="\t" > bb395_pseudofinder.txt

sed 's/,/\n/g' bb395_pseudofinder.txt | grep BB395 | sort > temp
mv temp bb395_pseudofinder.txt

awk 'NR==FNR {a[$1]; next} !($1 in a) {print}' bb395/bb395_pseudofinder.txt bb395/bb395_genes.txt > bb395/bb395_intact.txt

grep -f bb395/bb395_intact.txt bb395/PROKKA_03242023.gff > roary/bb395.prokka.intact.gff

grep '##' bb395/PROKKA_03242023.gff | sed '$d' > head

echo '##FASTA' >> roary/bb395.prokka.intact.gff

cat head roary/bb395.prokka.intact.gff bb395/PROKKA_03242023.fsa > temp

mv temp roary/bb395.prokka.intact.gff



### Roary and set operations to compare bb859 vs. bb433 and bb395

singularity run -i -e -H /export/groups/snoh/snoh/bonnhayl_genomes/roary /usr/local/singularity/roary_latest.sif roary -r -s -p 8 -i 70 *.gff

singularity run -i -e -H /export/groups/snoh/snoh/bonnhayl_genomes/roary /usr/local/singularity/roary_latest.sif query_pan_genome -a difference -i bbqs859.prokka.intact.gff -t bb395.prokka.intact.gff,bb433.prokka.intact.gff
